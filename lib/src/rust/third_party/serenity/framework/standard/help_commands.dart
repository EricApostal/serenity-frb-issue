// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.8.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../../../frb_generated.dart';
import '../../../../lib.dart';
import '../standard.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These functions are ignored because they have generic arguments: `create_customised_help_data`, `searched_lowercase`
// These types are ignored because they are neither used by any `pub` functions nor (for structs and enums) marked `#[frb(unignore)]`: `CustomisedHelpData`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `clone`, `clone`, `clone`, `clone`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`
// These functions have error during generation (see debug logs or enable `stop_on_error: true` for more details): `has_all_requirements`

/// Posts an embed showing each individual command group and its commands.
///
/// # Examples
///
/// Use the command with [`StandardFramework::help`]:
///
/// ```rust,no_run
/// # use serenity::prelude::*;
/// use std::collections::HashSet;
/// use std::hash::BuildHasher;
///
/// use serenity::framework::standard::help_commands::*;
/// use serenity::framework::standard::macros::help;
/// use serenity::framework::standard::{
///     Args,
///     CommandGroup,
///     CommandResult,
///     HelpOptions,
///     StandardFramework,
/// };
/// use serenity::model::prelude::*;
///
/// #[help]
/// async fn my_help(
///     context: &Context,
///     msg: &Message,
///     args: Args,
///     help_options: &'static HelpOptions,
///     groups: &[&'static CommandGroup],
///     owners: HashSet<UserId>,
/// ) -> CommandResult {
///     let _ = with_embeds(context, msg, args, &help_options, groups, owners).await?;
///     Ok(())
/// }
///
/// let framework = StandardFramework::new().help(&MY_HELP);
/// ```
///
/// # Errors
///
/// Returns the same errors as [`ChannelId::send_message`].
///
/// [`StandardFramework::help`]: crate::framework::standard::StandardFramework::help
Future<Message> withEmbeds({
  required Context ctx,
  required Message msg,
  required Args args,
  required HelpOptions helpOptions,
  required List<CommandGroup> groups,
  required HashSetUserIdBuildHasher owners,
}) => RustLib.instance.api.serenityFrameworkStandardHelpCommandsWithEmbeds(
  ctx: ctx,
  msg: msg,
  args: args,
  helpOptions: helpOptions,
  groups: groups,
  owners: owners,
);

/// Posts formatted text displaying each individual command group and its commands.
///
/// # Examples
///
/// Use the command with `exec_help`:
///
/// ```rust,no_run
/// # use serenity::prelude::*;
/// use std::collections::HashSet;
/// use std::hash::BuildHasher;
///
/// use serenity::framework::standard::help_commands::*;
/// use serenity::framework::standard::macros::help;
/// use serenity::framework::standard::{
///     Args,
///     CommandGroup,
///     CommandResult,
///     HelpOptions,
///     StandardFramework,
/// };
/// use serenity::model::prelude::*;
///
/// #[help]
/// async fn my_help(
///     context: &Context,
///     msg: &Message,
///     args: Args,
///     help_options: &'static HelpOptions,
///     groups: &[&'static CommandGroup],
///     owners: HashSet<UserId>,
/// ) -> CommandResult {
///     let _ = plain(context, msg, args, &help_options, groups, owners).await?;
///     Ok(())
/// }
///
/// let framework = StandardFramework::new().help(&MY_HELP);
/// ```
/// # Errors
///
/// Returns the same errors as [`ChannelId::send_message`].
Future<Message> plain({
  required Context ctx,
  required Message msg,
  required Args args,
  required HelpOptions helpOptions,
  required List<CommandGroup> groups,
  required HashSetUserIdBuildHasher owners,
}) => RustLib.instance.api.serenityFrameworkStandardHelpCommandsPlain(
  ctx: ctx,
  msg: msg,
  args: args,
  helpOptions: helpOptions,
  groups: groups,
  owners: owners,
);

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<GroupCommandsPair>>
abstract class GroupCommandsPair implements RustOpaqueInterface {
  List<String> get commandNames;

  List<Str> get prefixes;

  List<GroupCommandsPair> get subGroups;

  Str? get summary;

  set commandNames(List<String> commandNames);

  set prefixes(List<Str> prefixes);

  set subGroups(List<GroupCommandsPair> subGroups);

  set summary(Str? summary);

  static Future<GroupCommandsPair> default_() =>
      RustLib.instance.api
          .serenityFrameworkStandardHelpCommandsGroupCommandsPairDefault();
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<HashSet < UserId , BuildHasher + Send + Sync >>>
abstract class HashSetUserIdBuildHasher implements RustOpaqueInterface {}

/// A single suggested command containing its name and Levenshtein distance to the actual user's
/// searched command name.
class SuggestedCommandName {
  final String name;
  final BigInt levenshteinDistance;

  const SuggestedCommandName({
    required this.name,
    required this.levenshteinDistance,
  });

  static Future<SuggestedCommandName> default_() =>
      RustLib.instance.api
          .serenityFrameworkStandardHelpCommandsSuggestedCommandNameDefault();

  @override
  int get hashCode => name.hashCode ^ levenshteinDistance.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is SuggestedCommandName &&
          runtimeType == other.runtimeType &&
          name == other.name &&
          levenshteinDistance == other.levenshteinDistance;
}

/// Contains possible suggestions in case a command could not be found but are similar enough.
class Suggestions {
  final List<SuggestedCommandName> field0;

  const Suggestions({required this.field0});

  /// Immutably borrow inner [`Vec`].
  Future<void> asVec() => RustLib.instance.api
      .serenityFrameworkStandardHelpCommandsSuggestionsAsVec(that: this);

  static Future<Suggestions> default_() =>
      RustLib.instance.api
          .serenityFrameworkStandardHelpCommandsSuggestionsDefault();

  /// Concats names of suggestions with a given `separator`.
  Future<String> join({required String separator}) =>
      RustLib.instance.api.serenityFrameworkStandardHelpCommandsSuggestionsJoin(
        that: this,
        separator: separator,
      );

  @override
  int get hashCode => field0.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Suggestions &&
          runtimeType == other.runtimeType &&
          field0 == other.field0;
}
