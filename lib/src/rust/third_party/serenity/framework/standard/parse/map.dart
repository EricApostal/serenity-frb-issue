// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.8.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../../../../frb_generated.dart';
import '../../../model/application.dart';
import '../../standard.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These types are ignored because they are neither used by any `pub` functions nor (for structs and enums) marked `#[frb(unignore)]`: `Map`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `fmt`, `fmt`, `fmt`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CommandMap>>
abstract class CommandMap implements RustOpaqueInterface, ParseMap {
  static Future<CommandMap> default_() =>
      RustLib.instance.api.serenityFrameworkStandardParseMapCommandMapDefault();

  @override
  Future<Storage?> get_({required String name});

  @override
  Future<bool> isEmpty();

  @override
  Future<BigInt> maxLength();

  @override
  Future<BigInt> minLength();

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  static Future<CommandMap> newInstance({
    required List<Command> cmds,
    required Configuration conf,
  }) => RustLib.instance.api.serenityFrameworkStandardParseMapCommandMapNew(
    cmds: cmds,
    conf: conf,
  );
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<GroupMap>>
abstract class GroupMap implements RustOpaqueInterface, ParseMap {
  static Future<GroupMap> default_() =>
      RustLib.instance.api.serenityFrameworkStandardParseMapGroupMapDefault();

  @override
  Future<Storage?> get_({required String name});

  @override
  Future<bool> isEmpty();

  @override
  Future<BigInt> maxLength();

  @override
  Future<BigInt> minLength();

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  static Future<GroupMap> newInstance({
    required List<CommandGroup> groups,
    required Configuration conf,
  }) => RustLib.instance.api.serenityFrameworkStandardParseMapGroupMapNew(
    groups: groups,
    conf: conf,
  );
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< Storage>>
abstract class Storage implements RustOpaqueInterface {}

abstract class ParseMap {
  Future<Storage?> get_({required String n});

  Future<bool> isEmpty();

  Future<BigInt> maxLength();

  Future<BigInt> minLength();
}
