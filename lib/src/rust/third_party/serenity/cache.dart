// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.8.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import '../../lib.dart';
import 'model/id.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These functions are ignored because they have generic arguments: `channel`, `guild`, `message`, `role`, `update`, `user`
// These types are ignored because they are neither used by any `pub` functions nor (for structs and enums) marked `#[frb(unignore)]`: `CacheRefInner`, `CacheRef`, `CachedShardData`, `NotSend`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `deref`, `fmt`, `fmt`
// These functions have error during generation (see debug logs or enable `stop_on_error: true` for more details): `channel_messages`, `guild_channels`, `guild_roles`, `member`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Cache>>
abstract class Cache implements RustOpaqueInterface {
  /// Returns a channel category matching the given ID
  Future<GuildChannelRef?> category({required ChannelId channelId});

  /// Returns the parent category of the given channel ID.
  Future<ChannelId?> channelCategoryId({required ChannelId channelId});

  /// This method provides a reference to the user used by the bot.
  Future<CurrentUserRef> currentUser();

  static Future<Cache> default_() =>
      RustLib.instance.api.serenityCacheCacheDefault();

  /// Clones all channel categories in the given guild and returns them.
  Future<Map<ChannelId, GuildChannel>?> guildCategories({
    required GuildId guildId,
  });

  /// Returns the number of guild channels in the cache.
  Future<BigInt> guildChannelCount();

  /// Returns the number of cached guilds.
  Future<BigInt> guildCount();

  /// Fetches a vector of all [`Guild`]s' Ids that are stored in the cache.
  ///
  /// Note that if you are utilizing multiple [`Shard`]s, then the guilds retrieved over all
  /// shards are included in this count -- not just the current [`Context`]'s shard, if accessing
  /// from one.
  ///
  /// # Examples
  ///
  /// Print all of the Ids of guilds in the Cache:
  ///
  /// ```rust,no_run
  /// # use serenity::model::prelude::*;
  /// # use serenity::prelude::*;
  /// #
  /// struct Handler;
  ///
  /// #[serenity::async_trait]
  /// impl EventHandler for Handler {
  ///     async fn ready(&self, context: Context, _: Ready) {
  ///         let guilds = context.cache.guilds().len();
  ///
  ///         println!("Guilds in the Cache: {}", guilds);
  ///     }
  /// }
  /// ```
  ///
  /// [`Context`]: crate::client::Context
  /// [`Shard`]: crate::gateway::Shard
  Future<List<GuildId>> guilds();

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  /// Creates a new cache.
  static Future<Cache> newInstance() =>
      RustLib.instance.api.serenityCacheCacheNew();

  /// Creates a new cache instance with settings applied.
  ///
  /// # Examples
  ///
  /// ```rust
  /// use serenity::cache::{Cache, Settings};
  ///
  /// let mut settings = Settings::default();
  /// settings.max_messages = 10;
  ///
  /// let cache = Cache::new_with_settings(settings);
  /// ```
  static Future<Cache> newWithSettings({required Settings settings}) => RustLib
      .instance
      .api
      .serenityCacheCacheNewWithSettings(settings: settings);

  /// Sets the maximum amount of messages per channel to cache.
  ///
  /// By default, no messages will be cached.
  Future<void> setMaxMessages({required BigInt max});

  /// Returns the settings.
  ///
  /// # Examples
  ///
  /// Printing the maximum number of messages in a channel to be cached:
  ///
  /// ```rust
  /// use serenity::cache::Cache;
  ///
  /// # fn test() {
  /// let mut cache = Cache::new();
  /// println!("Max settings: {}", cache.settings().max_messages);
  /// # }
  /// ```
  Future<SettingsRef> settings();

  /// Returns the number of shards.
  Future<int> shardCount();

  /// This method clones and returns all unavailable guilds.
  Future<ReadOnlyMapRefGuildId> unavailableGuilds();

  /// Fetches the number of [`Member`]s that have not had data received.
  ///
  /// The important detail to note here is that this is the number of _member_s that have not had
  /// data received. A single [`User`] may have multiple associated member objects that have not
  /// been received.
  ///
  /// This can be used in combination with [`Shard::chunk_guild`], and can be used to determine
  /// how many members have not yet been received.
  ///
  /// ```rust,no_run
  /// # use serenity::model::prelude::*;
  /// # use serenity::prelude::*;
  /// struct Handler;
  ///
  /// #[serenity::async_trait]
  /// # #[cfg(feature = "client")]
  /// impl EventHandler for Handler {
  ///     async fn cache_ready(&self, ctx: Context, _: Vec<GuildId>) {
  ///         println!("{} unknown members", ctx.cache.unknown_members());
  ///     }
  /// }
  /// ```
  ///
  /// [`Shard::chunk_guild`]: crate::gateway::Shard::chunk_guild
  Future<BigInt> unknownMembers();

  /// Returns the amount of cached users.
  Future<BigInt> userCount();

  /// Clones all users and returns them.
  Future<ReadOnlyMapRefUserIdUser> users();
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CurrentUserRef < 'static>>>
abstract class CurrentUserRef implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<GuildChannelRef < 'static>>>
abstract class GuildChannelRef implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ReadOnlyMapRef < 'static, GuildId , () >>>
abstract class ReadOnlyMapRefGuildId implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ReadOnlyMapRef < 'static, UserId , User >>>
abstract class ReadOnlyMapRefUserIdUser implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SettingsRef < 'static>>>
abstract class SettingsRef implements RustOpaqueInterface {}
