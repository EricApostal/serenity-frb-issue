// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.8.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These types are ignored because they are neither used by any `pub` functions nor (for structs and enums) marked `#[frb(unignore)]`: `MentionParseError`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `fmt`, `fmt`, `fmt`, `fmt`, `from_str`, `from`, `from`, `from`
// These functions are ignored (category: IgnoreBecauseNotAllowedOwner): `mention`, `mention`, `mention`, `mention`, `mention`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Mention>>
abstract class Mention implements RustOpaqueInterface {}

abstract class Mentionable {
  /// Creates a [`Mention`] that will be able to notify or create a link to the item.
  ///
  /// [`Mention`] implements [`Display`], so [`ToString::to_string()`] can be called on it, or
  /// inserted directly into a [`format_args!`] type of macro.
  ///
  /// [`Display`]: fmt::Display
  ///
  /// # Examples
  ///
  /// ```
  /// # #[cfg(feature = "client")] {
  /// # use serenity::builder::CreateMessage;
  /// # use serenity::model::guild::Member;
  /// # use serenity::model::channel::GuildChannel;
  /// # use serenity::model::id::ChannelId;
  /// # use serenity::prelude::Context;
  /// # use serenity::Error;
  /// use serenity::model::mention::Mentionable;
  /// async fn greet(
  ///     ctx: Context,
  ///     member: Member,
  ///     to_channel: GuildChannel,
  ///     rules_channel: ChannelId,
  /// ) -> Result<(), Error> {
  ///     let builder = CreateMessage::new().content(format!(
  ///         "Hi {member}, welcome to the server! \
  ///         Please refer to {rules} for our code of conduct, \
  ///         and enjoy your stay.",
  ///         member = member.mention(),
  ///         rules = rules_channel.mention(),
  ///     ));
  ///     to_channel.id.send_message(ctx, builder).await?;
  ///     Ok(())
  /// }
  /// # }
  /// ```
  /// ```
  /// # use serenity::model::id::{RoleId, ChannelId, UserId};
  /// use serenity::model::mention::Mentionable;
  /// let user = UserId::new(1);
  /// let channel = ChannelId::new(2);
  /// let role = RoleId::new(3);
  /// assert_eq!(
  ///     "<@1> <#2> <@&3>",
  ///     format!("{} {} {}", user.mention(), channel.mention(), role.mention(),),
  /// )
  /// ```
  Future<Mention> mention();
}
