// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.8.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../../frb_generated.dart';
import '../../../lib.dart';
import '../utils.dart';
import 'id.dart';
import 'mention.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'permissions.dart';
import 'timestamp.dart';

// These types are ignored because they are neither used by any `pub` functions nor (for structs and enums) marked `#[frb(unignore)]`: `InvalidPermissionOverwriteType`, `PermissionOverwriteData`, `RawForumEmoji`, `SortOrder`, `ThreadsData`, `VideoQualityMode`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `bits`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `cmp`, `cmp`, `cmp`, `cmp`, `cmp`, `deserialize`, `deserialize`, `deserialize`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `from_bits_retain`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `hash`, `hash`, `hash`, `hash`, `hash`, `hash`, `partial_cmp`, `partial_cmp`, `partial_cmp`, `partial_cmp`, `partial_cmp`, `serialize`, `serialize`, `try_from`
// These functions have error during generation (see debug logs or enable `stop_on_error: true` for more details): `delete`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AutoArchiveDuration>>
abstract class AutoArchiveDuration implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Channel>>
abstract class Channel
    implements RustOpaqueInterface, ArgumentConvert, Mentionable {
  /// If this is a category channel, returns it.
  Future<GuildChannel?> category();

  /// Converts from [`Channel`] to `Option<GuildChannel>`.
  ///
  /// Converts `self` into an `Option<GuildChannel>`, consuming `self`, and discarding a
  /// [`PrivateChannel`] if any.
  ///
  /// # Examples
  ///
  /// Basic usage:
  ///
  /// ```rust,no_run
  /// # use serenity::model::channel::Channel;
  /// # fn run(channel: Channel) {
  /// match channel.guild() {
  ///     Some(guild_channel) => {
  ///         println!("It's a guild channel named {}!", guild_channel.name);
  ///     },
  ///     None => {
  ///         println!("It's not in a guild!");
  ///     },
  /// }
  /// # }
  /// ```
  Future<GuildChannel?> guild();

  /// Retrieves the Id of the inner [`GuildChannel`], or [`PrivateChannel`].
  Future<ChannelId> id();

  /// Determines if the channel is NSFW.
  Future<bool> isNsfw();

  @override
  Future<Mention> mention();

  /// Retrieves the position of the inner [`GuildChannel`].
  ///
  /// In DMs (private channel) it will return None.
  Future<int?> position();

  /// Converts from [`Channel`] to `Option<PrivateChannel>`.
  ///
  /// Converts `self` into an `Option<PrivateChannel>`, consuming `self`, and discarding a
  /// [`GuildChannel`], if any.
  ///
  /// # Examples
  ///
  /// Basic usage:
  ///
  /// ```rust,no_run
  /// # use serenity::model::channel::Channel;
  /// # fn run(channel: Channel) {
  /// #
  /// match channel.private() {
  ///     Some(private) => {
  ///         println!("It's a private channel with {}!", &private.recipient);
  ///     },
  ///     None => {
  ///         println!("It's not a private channel!");
  ///     },
  /// }
  /// # }
  /// ```
  Future<PrivateChannel?> private();
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ChannelFlags>>
abstract class ChannelFlags implements RustOpaqueInterface {
  static Future<ChannelFlags> default_() =>
      RustLib.instance.api.serenityModelChannelChannelFlagsDefault();
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ChannelType>>
abstract class ChannelType implements RustOpaqueInterface {
  static Future<ChannelType> default_() =>
      RustLib.instance.api.serenityModelChannelChannelTypeDefault();

  Future<void> name();
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ForumEmoji>>
abstract class ForumEmoji implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ForumTag>>
abstract class ForumTag implements RustOpaqueInterface {
  ForumEmoji? get emoji;

  ForumTagId get id;

  bool get moderated;

  String get name;

  set emoji(ForumEmoji? emoji);

  set id(ForumTagId id);

  set moderated(bool moderated);

  set name(String name);
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PermissionOverwrite>>
abstract class PermissionOverwrite implements RustOpaqueInterface {
  Permissions get allow;

  Permissions get deny;

  PermissionOverwriteType get kind;

  set allow(Permissions allow);

  set deny(Permissions deny);

  set kind(PermissionOverwriteType kind);
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PermissionOverwriteType>>
abstract class PermissionOverwriteType implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<StageInstance>>
abstract class StageInstance implements RustOpaqueInterface {
  ChannelId get channelId;

  bool get discoverableDisabled;

  GuildId get guildId;

  ScheduledEventId? get guildScheduledEventId;

  StageInstanceId get id;

  StageInstancePrivacyLevel get privacyLevel;

  String get topic;

  set channelId(ChannelId channelId);

  set discoverableDisabled(bool discoverableDisabled);

  set guildId(GuildId guildId);

  set guildScheduledEventId(ScheduledEventId? guildScheduledEventId);

  set id(StageInstanceId id);

  set privacyLevel(StageInstancePrivacyLevel privacyLevel);

  set topic(String topic);
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<StageInstancePrivacyLevel>>
abstract class StageInstancePrivacyLevel implements RustOpaqueInterface {
  static Future<StageInstancePrivacyLevel> default_() =>
      RustLib.instance.api
          .serenityModelChannelStageInstancePrivacyLevelDefault();
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ThreadMetadata>>
abstract class ThreadMetadata implements RustOpaqueInterface {
  Timestamp? get archiveTimestamp;

  bool get archived;

  AutoArchiveDuration get autoArchiveDuration;

  Timestamp? get createTimestamp;

  bool get invitable;

  bool get locked;

  set archiveTimestamp(Timestamp? archiveTimestamp);

  set archived(bool archived);

  set autoArchiveDuration(AutoArchiveDuration autoArchiveDuration);

  set createTimestamp(Timestamp? createTimestamp);

  set invitable(bool invitable);

  set locked(bool locked);
}
