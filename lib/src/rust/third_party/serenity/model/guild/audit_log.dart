// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.8.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../../../frb_generated.dart';
import '../../../../lib.dart';
import '../id.dart';
import 'automod.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These types are ignored because they are neither used by any `pub` functions nor (for structs and enums) marked `#[frb(unignore)]`: `AuditLogs`, `AutoModAction`, `ChannelAction`, `ChannelOverwriteAction`, `CreatorMonetizationAction`, `EmojiAction`, `EntityType`, `IntegrationAction`, `InviteAction`, `MemberAction`, `MessageAction`, `RoleAction`, `ScheduledEventAction`, `StageInstanceAction`, `StickerAction`, `ThreadAction`, `VoiceChannelStatusAction`, `WebhookAction`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `deserialize`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `serialize`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Action>>
abstract class Action implements RustOpaqueInterface {
  static Future<Action> fromValue({required int value}) => RustLib.instance.api
      .serenityModelGuildAuditLogActionFromValue(value: value);

  Future<ActionType> kind();

  Future<int> num();
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AffectedRole>>
abstract class AffectedRole implements RustOpaqueInterface {
  RoleId get id;

  String get name;

  set id(RoleId id);

  set name(String name);
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AuditLogEntry>>
abstract class AuditLogEntry implements RustOpaqueInterface {
  Action get action;

  List<Change>? get changes;

  AuditLogEntryId get id;

  Options? get options;

  String? get reason;

  GenericId? get targetId;

  UserId get userId;

  set action(Action action);

  set changes(List<Change>? changes);

  set id(AuditLogEntryId id);

  set options(Options? options);

  set reason(String? reason);

  set targetId(GenericId? targetId);

  set userId(UserId userId);
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Change>>
abstract class Change implements RustOpaqueInterface {
  Future<void> key();
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PartialIntegration>>
abstract class PartialIntegration implements RustOpaqueInterface {
  IntegrationAccount get account;

  IntegrationApplication? get application;

  IntegrationId get id;

  String get kind;

  String get name;

  set account(IntegrationAccount account);

  set application(IntegrationApplication? application);

  set id(IntegrationId id);

  set kind(String kind);

  set name(String name);
}

/// [Discord docs](https://discord.com/developers/docs/resources/audit-log#audit-log-entry-object-optional-audit-entry-info).
class Options {
  /// Name of the Auto Moderation rule that was triggered.
  final String? autoModerationRuleName;

  /// Trigger type of the Auto Moderation rule that was triggered.
  final String? autoModerationRuleTriggerType;

  /// ID of the app whose permissions were targeted.
  final ApplicationId? applicationId;

  /// Number of days after which inactive members were kicked.
  final BigInt? deleteMemberDays;

  /// Number of members removed by the prune
  final BigInt? membersRemoved;

  /// Channel in which the messages were deleted
  final ChannelId? channelId;

  /// Number of deleted messages.
  final BigInt? count;

  /// Id of the overwritten entity
  final GenericId? id;

  /// Type of overwritten entity ("member" or "role").
  final String? kind;

  /// Message that was pinned or unpinned.
  final MessageId? messageId;

  /// Name of the role if type is "role"
  final String? roleName;

  /// The status of a voice channel when set.
  final String? status;

  const Options({
    this.autoModerationRuleName,
    this.autoModerationRuleTriggerType,
    this.applicationId,
    this.deleteMemberDays,
    this.membersRemoved,
    this.channelId,
    this.count,
    this.id,
    this.kind,
    this.messageId,
    this.roleName,
    this.status,
  });

  @override
  int get hashCode =>
      autoModerationRuleName.hashCode ^
      autoModerationRuleTriggerType.hashCode ^
      applicationId.hashCode ^
      deleteMemberDays.hashCode ^
      membersRemoved.hashCode ^
      channelId.hashCode ^
      count.hashCode ^
      id.hashCode ^
      kind.hashCode ^
      messageId.hashCode ^
      roleName.hashCode ^
      status.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Options &&
          runtimeType == other.runtimeType &&
          autoModerationRuleName == other.autoModerationRuleName &&
          autoModerationRuleTriggerType ==
              other.autoModerationRuleTriggerType &&
          applicationId == other.applicationId &&
          deleteMemberDays == other.deleteMemberDays &&
          membersRemoved == other.membersRemoved &&
          channelId == other.channelId &&
          count == other.count &&
          id == other.id &&
          kind == other.kind &&
          messageId == other.messageId &&
          roleName == other.roleName &&
          status == other.status;
}
