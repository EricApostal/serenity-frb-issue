// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.8.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `assert_receiver_is_total_eq`, `clone`, `cmp`, `deref`, `eq`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `from_str`, `from`, `from`, `hash`, `partial_cmp`, `try_from`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<InvalidTimestamp>>
abstract class InvalidTimestamp implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ParseError>>
abstract class ParseError implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Timestamp>>
abstract class Timestamp implements RustOpaqueInterface {
  static Future<Timestamp> default_() =>
      RustLib.instance.api.serenityModelTimestampTimestampDefault();

  /// Creates a new [`Timestamp`] from the number of milliseconds since 1970.
  ///
  /// # Errors
  ///
  /// Returns `Err` if the value is invalid.
  static Future<Timestamp> fromMillis({required PlatformInt64 millis}) =>
      RustLib.instance.api.serenityModelTimestampTimestampFromMillis(
        millis: millis,
      );

  /// Creates a new [`Timestamp`] from a UNIX timestamp (seconds since 1970).
  ///
  /// # Errors
  ///
  /// Returns `Err` if the value is invalid.
  static Future<Timestamp> fromUnixTimestamp({required PlatformInt64 secs}) =>
      RustLib.instance.api.serenityModelTimestampTimestampFromUnixTimestamp(
        secs: secs,
      );

  /// Create a new `Timestamp` with the current date and time in UTC.
  static Future<Timestamp> now() =>
      RustLib.instance.api.serenityModelTimestampTimestampNow();

  /// Parse a timestamp from an RFC 3339 date and time string.
  ///
  /// # Examples
  /// ```
  /// # use serenity::model::Timestamp;
  /// #
  /// let timestamp = Timestamp::parse("2016-04-30T11:18:25Z").unwrap();
  /// let timestamp = Timestamp::parse("2016-04-30T11:18:25+00:00").unwrap();
  /// let timestamp = Timestamp::parse("2016-04-30T11:18:25.796Z").unwrap();
  ///
  /// assert!(Timestamp::parse("2016-04-30T11:18:25").is_err());
  /// assert!(Timestamp::parse("2016-04-30T11:18").is_err());
  /// ```
  ///
  /// # Errors
  ///
  /// Returns `Err` if the string is not a valid RFC 3339 date and time string.
  static Future<Timestamp> parse({required String input}) =>
      RustLib.instance.api.serenityModelTimestampTimestampParse(input: input);

  Future<String?> toRfc3339();

  /// Returns the number of non-leap seconds since January 1, 1970 0:00:00 UTC
  Future<PlatformInt64> unixTimestamp();
}
