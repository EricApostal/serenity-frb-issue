// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.8.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../../frb_generated.dart';
import '../../../lib.dart';
import '../cache.dart';
import 'channel/channel_id.dart';
import 'guild.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'timestamp.dart';

// These types are ignored because they are neither used by any `pub` functions nor (for structs and enums) marked `#[frb(unignore)]`: `InnerId`, `SnowflakeVisitor`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `as_ref`, `as_ref`, `as_ref`, `as_ref`, `as_ref`, `as_ref`, `as_ref`, `as_ref`, `as_ref`, `as_ref`, `as_ref`, `as_ref`, `as_ref`, `as_ref`, `as_ref`, `as_ref`, `as_ref`, `as_ref`, `as_ref`, `as_ref`, `as_ref`, `as_ref`, `as_ref`, `as_ref`, `as_ref`, `as_ref`, `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `cmp`, `cmp`, `cmp`, `cmp`, `cmp`, `cmp`, `cmp`, `cmp`, `cmp`, `cmp`, `cmp`, `cmp`, `cmp`, `cmp`, `cmp`, `cmp`, `cmp`, `cmp`, `cmp`, `cmp`, `cmp`, `cmp`, `cmp`, `cmp`, `cmp`, `cmp`, `cmp`, `cmp`, `cmp`, `deserialize`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `expecting`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `from_str`, `from_str`, `from_str`, `from_str`, `from_str`, `from_str`, `from_str`, `from_str`, `from_str`, `from_str`, `from_str`, `from_str`, `from_str`, `from_str`, `from_str`, `from_str`, `from_str`, `from_str`, `from_str`, `from_str`, `from_str`, `from_str`, `from_str`, `from_str`, `from_str`, `from_str`, `from_str`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `hash`, `hash`, `hash`, `hash`, `hash`, `hash`, `hash`, `hash`, `hash`, `hash`, `hash`, `hash`, `hash`, `hash`, `hash`, `hash`, `hash`, `hash`, `hash`, `hash`, `hash`, `hash`, `hash`, `hash`, `hash`, `hash`, `hash`, `hash`, `hash`, `partial_cmp`, `partial_cmp`, `partial_cmp`, `partial_cmp`, `partial_cmp`, `partial_cmp`, `partial_cmp`, `partial_cmp`, `partial_cmp`, `partial_cmp`, `partial_cmp`, `partial_cmp`, `partial_cmp`, `partial_cmp`, `partial_cmp`, `partial_cmp`, `partial_cmp`, `partial_cmp`, `partial_cmp`, `partial_cmp`, `partial_cmp`, `partial_cmp`, `partial_cmp`, `partial_cmp`, `partial_cmp`, `partial_cmp`, `partial_cmp`, `partial_cmp`, `partial_cmp`, `serialize`, `visit_i64`, `visit_str`, `visit_u64`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AnswerId>>
abstract class AnswerId implements RustOpaqueInterface {
  /// Retrieves the value as a [`u64`].
  ///
  /// Keep in mind that this is **not a snowflake** and the values are subject to change.
  Future<BigInt> get_();
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ApplicationId>>
abstract class ApplicationId implements RustOpaqueInterface {
  ///Retrieves the time that the ApplicationId was created.
  Future<Timestamp> createdAt();

  static Future<ApplicationId> default_() =>
      RustLib.instance.api.serenityModelIdApplicationIdDefault();

  /// Retrieves the inner `id` as a [`u64`].
  Future<BigInt> get_();

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  ///Creates a new ApplicationId from a u64.
  /// # Panics
  /// Panics if `id` is zero.
  static Future<ApplicationId> newInstance({required BigInt id}) =>
      RustLib.instance.api.serenityModelIdApplicationIdNew(id: id);
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AttachmentId>>
abstract class AttachmentId implements RustOpaqueInterface {
  ///Retrieves the time that the AttachmentId was created.
  Future<Timestamp> createdAt();

  static Future<AttachmentId> default_() =>
      RustLib.instance.api.serenityModelIdAttachmentIdDefault();

  /// Retrieves the inner `id` as a [`u64`].
  Future<BigInt> get_();

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  ///Creates a new AttachmentId from a u64.
  /// # Panics
  /// Panics if `id` is zero.
  static Future<AttachmentId> newInstance({required BigInt id}) =>
      RustLib.instance.api.serenityModelIdAttachmentIdNew(id: id);
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AuditLogEntryId>>
abstract class AuditLogEntryId implements RustOpaqueInterface {
  ///Retrieves the time that the AuditLogEntryId was created.
  Future<Timestamp> createdAt();

  static Future<AuditLogEntryId> default_() =>
      RustLib.instance.api.serenityModelIdAuditLogEntryIdDefault();

  /// Retrieves the inner `id` as a [`u64`].
  Future<BigInt> get_();

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  ///Creates a new AuditLogEntryId from a u64.
  /// # Panics
  /// Panics if `id` is zero.
  static Future<AuditLogEntryId> newInstance({required BigInt id}) =>
      RustLib.instance.api.serenityModelIdAuditLogEntryIdNew(id: id);
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ChannelId>>
abstract class ChannelId implements RustOpaqueInterface {
  ///Retrieves the time that the ChannelId was created.
  Future<Timestamp> createdAt();

  static Future<ChannelId> default_() =>
      RustLib.instance.api.serenityModelIdChannelIdDefault();

  /// Retrieves the inner `id` as a [`u64`].
  Future<BigInt> get_();

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  ///Creates a new ChannelId from a u64.
  /// # Panics
  /// Panics if `id` is zero.
  static Future<ChannelId> newInstance({required BigInt id}) =>
      RustLib.instance.api.serenityModelIdChannelIdNew(id: id);

  /// Starts typing in the channel for an indefinite period of time.
  ///
  /// Returns [`Typing`] that is used to trigger the typing. [`Typing::stop`] must be called on
  /// the returned struct to stop typing. Note that on some clients, typing may persist for a few
  /// seconds after [`Typing::stop`] is called. Typing is also stopped when the struct is
  /// dropped.
  ///
  /// If a message is sent while typing is triggered, the user will stop typing for a brief
  /// period of time and then resume again until either [`Typing::stop`] is called or the struct
  /// is dropped.
  ///
  /// This should rarely be used for bots, although it is a good indicator that a long-running
  /// command is still being processed.
  ///
  /// ## Examples
  ///
  /// ```rust,no_run
  /// # use serenity::{http::Http, Result, model::id::ChannelId};
  /// # use std::sync::Arc;
  /// #
  /// # fn long_process() {}
  /// # fn main() {
  /// # let http: Arc<Http> = unimplemented!();
  /// // Initiate typing (assuming http is `Arc<Http>`)
  /// let typing = ChannelId::new(7).start_typing(&http);
  ///
  /// // Run some long-running process
  /// long_process();
  ///
  /// // Stop typing
  /// typing.stop();
  /// # }
  /// ```
  ///
  /// # Errors
  ///
  /// Returns [`Error::Http`] if the current user lacks permission
  /// to send messages in this channel.
  Future<Typing> startTyping({required ArcHttp http});

  /// Attempts to find a [`GuildChannel`] by its Id in the cache.
  Future<GuildChannelRef?> toChannelCached({required Cache cache});
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CommandId>>
abstract class CommandId implements RustOpaqueInterface {
  ///Retrieves the time that the CommandId was created.
  Future<Timestamp> createdAt();

  static Future<CommandId> default_() =>
      RustLib.instance.api.serenityModelIdCommandIdDefault();

  /// Retrieves the inner `id` as a [`u64`].
  Future<BigInt> get_();

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  ///Creates a new CommandId from a u64.
  /// # Panics
  /// Panics if `id` is zero.
  static Future<CommandId> newInstance({required BigInt id}) =>
      RustLib.instance.api.serenityModelIdCommandIdNew(id: id);
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CommandPermissionId>>
abstract class CommandPermissionId implements RustOpaqueInterface {
  ///Retrieves the time that the CommandPermissionId was created.
  Future<Timestamp> createdAt();

  static Future<CommandPermissionId> default_() =>
      RustLib.instance.api.serenityModelIdCommandPermissionIdDefault();

  /// Retrieves the inner `id` as a [`u64`].
  Future<BigInt> get_();

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  ///Creates a new CommandPermissionId from a u64.
  /// # Panics
  /// Panics if `id` is zero.
  static Future<CommandPermissionId> newInstance({required BigInt id}) =>
      RustLib.instance.api.serenityModelIdCommandPermissionIdNew(id: id);

  /// Converts this [`CommandPermissionId`] to [`RoleId`].
  Future<RoleId> toRoleId();

  /// Converts this [`CommandPermissionId`] to [`UserId`].
  Future<UserId> toUserId();
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CommandVersionId>>
abstract class CommandVersionId implements RustOpaqueInterface {
  ///Retrieves the time that the CommandVersionId was created.
  Future<Timestamp> createdAt();

  static Future<CommandVersionId> default_() =>
      RustLib.instance.api.serenityModelIdCommandVersionIdDefault();

  /// Retrieves the inner `id` as a [`u64`].
  Future<BigInt> get_();

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  ///Creates a new CommandVersionId from a u64.
  /// # Panics
  /// Panics if `id` is zero.
  static Future<CommandVersionId> newInstance({required BigInt id}) =>
      RustLib.instance.api.serenityModelIdCommandVersionIdNew(id: id);
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<EmojiId>>
abstract class EmojiId implements RustOpaqueInterface {
  ///Retrieves the time that the EmojiId was created.
  Future<Timestamp> createdAt();

  static Future<EmojiId> default_() =>
      RustLib.instance.api.serenityModelIdEmojiIdDefault();

  /// Retrieves the inner `id` as a [`u64`].
  Future<BigInt> get_();

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  ///Creates a new EmojiId from a u64.
  /// # Panics
  /// Panics if `id` is zero.
  static Future<EmojiId> newInstance({required BigInt id}) =>
      RustLib.instance.api.serenityModelIdEmojiIdNew(id: id);
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<EntitlementId>>
abstract class EntitlementId implements RustOpaqueInterface {
  ///Retrieves the time that the EntitlementId was created.
  Future<Timestamp> createdAt();

  static Future<EntitlementId> default_() =>
      RustLib.instance.api.serenityModelIdEntitlementIdDefault();

  /// Retrieves the inner `id` as a [`u64`].
  Future<BigInt> get_();

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  ///Creates a new EntitlementId from a u64.
  /// # Panics
  /// Panics if `id` is zero.
  static Future<EntitlementId> newInstance({required BigInt id}) =>
      RustLib.instance.api.serenityModelIdEntitlementIdNew(id: id);
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ForumTagId>>
abstract class ForumTagId implements RustOpaqueInterface {
  ///Retrieves the time that the ForumTagId was created.
  Future<Timestamp> createdAt();

  static Future<ForumTagId> default_() =>
      RustLib.instance.api.serenityModelIdForumTagIdDefault();

  /// Retrieves the inner `id` as a [`u64`].
  Future<BigInt> get_();

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  ///Creates a new ForumTagId from a u64.
  /// # Panics
  /// Panics if `id` is zero.
  static Future<ForumTagId> newInstance({required BigInt id}) =>
      RustLib.instance.api.serenityModelIdForumTagIdNew(id: id);
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<GenericId>>
abstract class GenericId implements RustOpaqueInterface {
  ///Retrieves the time that the GenericId was created.
  Future<Timestamp> createdAt();

  static Future<GenericId> default_() =>
      RustLib.instance.api.serenityModelIdGenericIdDefault();

  /// Retrieves the inner `id` as a [`u64`].
  Future<BigInt> get_();

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  ///Creates a new GenericId from a u64.
  /// # Panics
  /// Panics if `id` is zero.
  static Future<GenericId> newInstance({required BigInt id}) =>
      RustLib.instance.api.serenityModelIdGenericIdNew(id: id);
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<GuildId>>
abstract class GuildId implements RustOpaqueInterface {
  /// Bans multiple users from the guild, returning the users that were and weren't banned, and
  /// optionally deleting messages that are younger than the provided `delete_message_seconds`.
  ///
  /// # Errors
  ///
  /// Errors if none of the users are banned or you do not have the
  /// required [`BAN_MEMBERS`] and [`MANAGE_GUILD`] permissions.
  ///
  /// [`BAN_MEMBERS`]: Permissions::BAN_MEMBERS
  /// [`MANAGE_GUILD`]: Permissions::MANAGE_GUILD
  Future<BulkBanResponse> bulkBan({
    required Http http,
    required List<UserId> userIds,
    required int deleteMessageSeconds,
    Str? reason,
  });

  ///Retrieves the time that the GuildId was created.
  Future<Timestamp> createdAt();

  static Future<GuildId> default_() =>
      RustLib.instance.api.serenityModelIdGuildIdDefault();

  /// Gets the default permission role (@everyone) from the guild.
  Future<RoleId> everyoneRole();

  /// Retrieves the inner `id` as a [`u64`].
  Future<BigInt> get_();

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  ///Creates a new GuildId from a u64.
  /// # Panics
  /// Panics if `id` is zero.
  static Future<GuildId> newInstance({required BigInt id}) =>
      RustLib.instance.api.serenityModelIdGuildIdNew(id: id);

  /// Get the widget image URL.
  Future<String> widgetImageUrl({required GuildWidgetStyle style});
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<IntegrationId>>
abstract class IntegrationId implements RustOpaqueInterface {
  ///Retrieves the time that the IntegrationId was created.
  Future<Timestamp> createdAt();

  static Future<IntegrationId> default_() =>
      RustLib.instance.api.serenityModelIdIntegrationIdDefault();

  /// Retrieves the inner `id` as a [`u64`].
  Future<BigInt> get_();

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  ///Creates a new IntegrationId from a u64.
  /// # Panics
  /// Panics if `id` is zero.
  static Future<IntegrationId> newInstance({required BigInt id}) =>
      RustLib.instance.api.serenityModelIdIntegrationIdNew(id: id);
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<InteractionId>>
abstract class InteractionId implements RustOpaqueInterface {
  ///Retrieves the time that the InteractionId was created.
  Future<Timestamp> createdAt();

  static Future<InteractionId> default_() =>
      RustLib.instance.api.serenityModelIdInteractionIdDefault();

  /// Retrieves the inner `id` as a [`u64`].
  Future<BigInt> get_();

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  ///Creates a new InteractionId from a u64.
  /// # Panics
  /// Panics if `id` is zero.
  static Future<InteractionId> newInstance({required BigInt id}) =>
      RustLib.instance.api.serenityModelIdInteractionIdNew(id: id);
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MessageId>>
abstract class MessageId implements RustOpaqueInterface {
  ///Retrieves the time that the MessageId was created.
  Future<Timestamp> createdAt();

  static Future<MessageId> default_() =>
      RustLib.instance.api.serenityModelIdMessageIdDefault();

  /// Retrieves the inner `id` as a [`u64`].
  Future<BigInt> get_();

  /// Returns a link referencing this message. When clicked, users will jump to the message. The
  /// link will be valid for messages in either private channels or guilds.
  Future<String> link({required ChannelId channelId, GuildId? guildId});

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  ///Creates a new MessageId from a u64.
  /// # Panics
  /// Panics if `id` is zero.
  static Future<MessageId> newInstance({required BigInt id}) =>
      RustLib.instance.api.serenityModelIdMessageIdNew(id: id);
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RoleId>>
abstract class RoleId implements RustOpaqueInterface {
  ///Retrieves the time that the RoleId was created.
  Future<Timestamp> createdAt();

  static Future<RoleId> default_() =>
      RustLib.instance.api.serenityModelIdRoleIdDefault();

  /// Retrieves the inner `id` as a [`u64`].
  Future<BigInt> get_();

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  ///Creates a new RoleId from a u64.
  /// # Panics
  /// Panics if `id` is zero.
  static Future<RoleId> newInstance({required BigInt id}) =>
      RustLib.instance.api.serenityModelIdRoleIdNew(id: id);
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RuleId>>
abstract class RuleId implements RustOpaqueInterface {
  ///Retrieves the time that the RuleId was created.
  Future<Timestamp> createdAt();

  static Future<RuleId> default_() =>
      RustLib.instance.api.serenityModelIdRuleIdDefault();

  /// Retrieves the inner `id` as a [`u64`].
  Future<BigInt> get_();

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  ///Creates a new RuleId from a u64.
  /// # Panics
  /// Panics if `id` is zero.
  static Future<RuleId> newInstance({required BigInt id}) =>
      RustLib.instance.api.serenityModelIdRuleIdNew(id: id);
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ScheduledEventId>>
abstract class ScheduledEventId implements RustOpaqueInterface {
  ///Retrieves the time that the ScheduledEventId was created.
  Future<Timestamp> createdAt();

  static Future<ScheduledEventId> default_() =>
      RustLib.instance.api.serenityModelIdScheduledEventIdDefault();

  /// Retrieves the inner `id` as a [`u64`].
  Future<BigInt> get_();

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  ///Creates a new ScheduledEventId from a u64.
  /// # Panics
  /// Panics if `id` is zero.
  static Future<ScheduledEventId> newInstance({required BigInt id}) =>
      RustLib.instance.api.serenityModelIdScheduledEventIdNew(id: id);
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SkuId>>
abstract class SkuId implements RustOpaqueInterface {
  ///Retrieves the time that the SkuId was created.
  Future<Timestamp> createdAt();

  static Future<SkuId> default_() =>
      RustLib.instance.api.serenityModelIdSkuIdDefault();

  /// Retrieves the inner `id` as a [`u64`].
  Future<BigInt> get_();

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  ///Creates a new SkuId from a u64.
  /// # Panics
  /// Panics if `id` is zero.
  static Future<SkuId> newInstance({required BigInt id}) =>
      RustLib.instance.api.serenityModelIdSkuIdNew(id: id);
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<StageInstanceId>>
abstract class StageInstanceId implements RustOpaqueInterface {
  ///Retrieves the time that the StageInstanceId was created.
  Future<Timestamp> createdAt();

  static Future<StageInstanceId> default_() =>
      RustLib.instance.api.serenityModelIdStageInstanceIdDefault();

  /// Retrieves the inner `id` as a [`u64`].
  Future<BigInt> get_();

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  ///Creates a new StageInstanceId from a u64.
  /// # Panics
  /// Panics if `id` is zero.
  static Future<StageInstanceId> newInstance({required BigInt id}) =>
      RustLib.instance.api.serenityModelIdStageInstanceIdNew(id: id);
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<StickerId>>
abstract class StickerId implements RustOpaqueInterface {
  ///Retrieves the time that the StickerId was created.
  Future<Timestamp> createdAt();

  static Future<StickerId> default_() =>
      RustLib.instance.api.serenityModelIdStickerIdDefault();

  /// Retrieves the inner `id` as a [`u64`].
  Future<BigInt> get_();

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  ///Creates a new StickerId from a u64.
  /// # Panics
  /// Panics if `id` is zero.
  static Future<StickerId> newInstance({required BigInt id}) =>
      RustLib.instance.api.serenityModelIdStickerIdNew(id: id);
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<StickerPackBannerId>>
abstract class StickerPackBannerId implements RustOpaqueInterface {
  ///Retrieves the time that the StickerPackBannerId was created.
  Future<Timestamp> createdAt();

  static Future<StickerPackBannerId> default_() =>
      RustLib.instance.api.serenityModelIdStickerPackBannerIdDefault();

  /// Retrieves the inner `id` as a [`u64`].
  Future<BigInt> get_();

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  ///Creates a new StickerPackBannerId from a u64.
  /// # Panics
  /// Panics if `id` is zero.
  static Future<StickerPackBannerId> newInstance({required BigInt id}) =>
      RustLib.instance.api.serenityModelIdStickerPackBannerIdNew(id: id);
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<StickerPackId>>
abstract class StickerPackId implements RustOpaqueInterface {
  ///Retrieves the time that the StickerPackId was created.
  Future<Timestamp> createdAt();

  static Future<StickerPackId> default_() =>
      RustLib.instance.api.serenityModelIdStickerPackIdDefault();

  /// Retrieves the inner `id` as a [`u64`].
  Future<BigInt> get_();

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  ///Creates a new StickerPackId from a u64.
  /// # Panics
  /// Panics if `id` is zero.
  static Future<StickerPackId> newInstance({required BigInt id}) =>
      RustLib.instance.api.serenityModelIdStickerPackIdNew(id: id);
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<TargetId>>
abstract class TargetId implements RustOpaqueInterface {
  ///Retrieves the time that the TargetId was created.
  Future<Timestamp> createdAt();

  static Future<TargetId> default_() =>
      RustLib.instance.api.serenityModelIdTargetIdDefault();

  /// Retrieves the inner `id` as a [`u64`].
  Future<BigInt> get_();

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  ///Creates a new TargetId from a u64.
  /// # Panics
  /// Panics if `id` is zero.
  static Future<TargetId> newInstance({required BigInt id}) =>
      RustLib.instance.api.serenityModelIdTargetIdNew(id: id);

  /// Converts this [`TargetId`] to [`MessageId`].
  Future<MessageId> toMessageId();

  /// Converts this [`TargetId`] to [`UserId`].
  Future<UserId> toUserId();
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<UserId>>
abstract class UserId implements RustOpaqueInterface {
  ///Retrieves the time that the UserId was created.
  Future<Timestamp> createdAt();

  static Future<UserId> default_() =>
      RustLib.instance.api.serenityModelIdUserIdDefault();

  /// Retrieves the inner `id` as a [`u64`].
  Future<BigInt> get_();

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  ///Creates a new UserId from a u64.
  /// # Panics
  /// Panics if `id` is zero.
  static Future<UserId> newInstance({required BigInt id}) =>
      RustLib.instance.api.serenityModelIdUserIdNew(id: id);
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<WebhookId>>
abstract class WebhookId implements RustOpaqueInterface {
  ///Retrieves the time that the WebhookId was created.
  Future<Timestamp> createdAt();

  static Future<WebhookId> default_() =>
      RustLib.instance.api.serenityModelIdWebhookIdDefault();

  /// Retrieves the inner `id` as a [`u64`].
  Future<BigInt> get_();

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  ///Creates a new WebhookId from a u64.
  /// # Panics
  /// Panics if `id` is zero.
  static Future<WebhookId> newInstance({required BigInt id}) =>
      RustLib.instance.api.serenityModelIdWebhookIdNew(id: id);
}

/// An identifier for a Shard.
///
/// This identifier is special, it simply models internal IDs for type safety,
/// and therefore cannot be [`Serialize`]d or [`Deserialize`]d.
class ShardId {
  final int field0;

  const ShardId({required this.field0});

  /// Retrieves the value as a [`u32`].
  ///
  /// This is not a [`u64`] as [`ShardId`]s are not a discord concept and are simply used for
  /// internal type safety.
  Future<int> get_() =>
      RustLib.instance.api.serenityModelIdShardIdGet(that: this);

  @override
  int get hashCode => field0.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ShardId &&
          runtimeType == other.runtimeType &&
          field0 == other.field0;
}
