// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.8.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../../frb_generated.dart';
import '../../../lib.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `assert_receiver_is_total_eq`, `bits`, `clone`, `deserialize`, `eq`, `fmt`, `fmt`, `from_bits_retain`, `hash`, `serialize`

Permissions get presetGeneral =>
    RustLib.instance.api.serenityModelPermissionsPresetGeneral();

Permissions get presetText =>
    RustLib.instance.api.serenityModelPermissionsPresetText();

Permissions get presetVoice =>
    RustLib.instance.api.serenityModelPermissionsPresetVoice();

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Permissions>>
abstract class Permissions implements RustOpaqueInterface {
  ///Shorthand for checking that the set of permissions contains the [Add Reactions] permission.
  ///
  ///[Add Reactions]: Self::ADD_REACTIONS
  Future<bool> addReactions();

  ///Shorthand for checking that the set of permissions contains the [Administrator] permission.
  ///
  ///[Administrator]: Self::ADMINISTRATOR
  Future<bool> administrator();

  ///Shorthand for checking that the set of permissions contains the [Attach Files] permission.
  ///
  ///[Attach Files]: Self::ATTACH_FILES
  Future<bool> attachFiles();

  ///Shorthand for checking that the set of permissions contains the [Ban Members] permission.
  ///
  ///[Ban Members]: Self::BAN_MEMBERS
  Future<bool> banMembers();

  ///Shorthand for checking that the set of permissions contains the [Change Nickname] permission.
  ///
  ///[Change Nickname]: Self::CHANGE_NICKNAME
  Future<bool> changeNickname();

  ///Shorthand for checking that the set of permissions contains the [Connect] permission.
  ///
  ///[Connect]: Self::CONNECT
  Future<bool> connect();

  ///Shorthand for checking that the set of permissions contains the [Create Events] permission.
  ///
  ///[Create Events]: Self::CREATE_EVENTS
  Future<bool> createEvents();

  ///Shorthand for checking that the set of permissions contains the [Create Guild Expressions] permission.
  ///
  ///[Create Guild Expressions]: Self::CREATE_GUILD_EXPRESSIONS
  Future<bool> createGuildExpressions();

  ///Shorthand for checking that the set of permissions contains the [Create Invites] permission.
  ///
  ///[Create Invites]: Self::CREATE_INSTANT_INVITE
  Future<bool> createInstantInvite();

  ///Shorthand for checking that the set of permissions contains the [Create Private Threads] permission.
  ///
  ///[Create Private Threads]: Self::CREATE_PRIVATE_THREADS
  Future<bool> createPrivateThreads();

  ///Shorthand for checking that the set of permissions contains the [Create Public Threads] permission.
  ///
  ///[Create Public Threads]: Self::CREATE_PUBLIC_THREADS
  Future<bool> createPublicThreads();

  ///Shorthand for checking that the set of permissions contains the [Deafen Members] permission.
  ///
  ///[Deafen Members]: Self::DEAFEN_MEMBERS
  Future<bool> deafenMembers();

  static Future<Permissions> default_() =>
      RustLib.instance.api.serenityModelPermissionsPermissionsDefault();

  static Future<Permissions> dmPermissions() =>
      RustLib.instance.api.serenityModelPermissionsPermissionsDmPermissions();

  ///Shorthand for checking that the set of permissions contains the [Embed Links] permission.
  ///
  ///[Embed Links]: Self::EMBED_LINKS
  Future<bool> embedLinks();

  /// Returns a list of names of all contained permissions.
  Future<List<Str>> getPermissionNames();

  ///Shorthand for checking that the set of permissions contains the [Kick Members] permission.
  ///
  ///[Kick Members]: Self::KICK_MEMBERS
  Future<bool> kickMembers();

  ///Shorthand for checking that the set of permissions contains the [Manage Channels] permission.
  ///
  ///[Manage Channels]: Self::MANAGE_CHANNELS
  Future<bool> manageChannels();

  ///Shorthand for checking that the set of permissions contains the [Manage Emojis and Stickers] permission.
  ///
  ///[Manage Emojis and Stickers]: Self::MANAGE_EMOJIS_AND_STICKERS
  Future<bool> manageEmojisAndStickers();

  ///Shorthand for checking that the set of permissions contains the [Manage Events] permission.
  ///
  ///[Manage Events]: Self::MANAGE_EVENTS
  Future<bool> manageEvents();

  ///Shorthand for checking that the set of permissions contains the [Manage Guild] permission.
  ///
  ///[Manage Guild]: Self::MANAGE_GUILD
  Future<bool> manageGuild();

  ///Shorthand for checking that the set of permissions contains the [Manage Guild Expressions] permission.
  ///
  ///[Manage Guild Expressions]: Self::MANAGE_GUILD_EXPRESSIONS
  Future<bool> manageGuildExpressions();

  ///Shorthand for checking that the set of permissions contains the [Manage Messages] permission.
  ///
  ///[Manage Messages]: Self::MANAGE_MESSAGES
  Future<bool> manageMessages();

  ///Shorthand for checking that the set of permissions contains the [Manage Nicknames] permission.
  ///
  ///[Manage Nicknames]: Self::MANAGE_NICKNAMES
  Future<bool> manageNicknames();

  ///Shorthand for checking that the set of permissions contains the [Manage Roles] permission.
  ///
  ///[Manage Roles]: Self::MANAGE_ROLES
  Future<bool> manageRoles();

  ///Shorthand for checking that the set of permissions contains the [Manage Threads] permission.
  ///
  ///[Manage Threads]: Self::MANAGE_THREADS
  Future<bool> manageThreads();

  ///Shorthand for checking that the set of permissions contains the [Manage Webhooks] permission.
  ///
  ///[Manage Webhooks]: Self::MANAGE_WEBHOOKS
  Future<bool> manageWebhooks();

  ///Shorthand for checking that the set of permissions contains the [Mention @everyone, @here, and All Roles] permission.
  ///
  ///[Mention @everyone, @here, and All Roles]: Self::MENTION_EVERYONE
  Future<bool> mentionEveryone();

  ///Shorthand for checking that the set of permissions contains the [Moderate Members] permission.
  ///
  ///[Moderate Members]: Self::MODERATE_MEMBERS
  Future<bool> moderateMembers();

  ///Shorthand for checking that the set of permissions contains the [Move Members] permission.
  ///
  ///[Move Members]: Self::MOVE_MEMBERS
  Future<bool> moveMembers();

  ///Shorthand for checking that the set of permissions contains the [Mute Members] permission.
  ///
  ///[Mute Members]: Self::MUTE_MEMBERS
  Future<bool> muteMembers();

  ///Shorthand for checking that the set of permissions contains the [Priority Speaker] permission.
  ///
  ///[Priority Speaker]: Self::PRIORITY_SPEAKER
  Future<bool> prioritySpeaker();

  ///Shorthand for checking that the set of permissions contains the [Read Message History] permission.
  ///
  ///[Read Message History]: Self::READ_MESSAGE_HISTORY
  Future<bool> readMessageHistory();

  ///Shorthand for checking that the set of permissions contains the [Request to Speak] permission.
  ///
  ///[Request to Speak]: Self::REQUEST_TO_SPEAK
  Future<bool> requestToSpeak();

  ///Shorthand for checking that the set of permissions contains the [Send Messages] permission.
  ///
  ///[Send Messages]: Self::SEND_MESSAGES
  Future<bool> sendMessages();

  ///Shorthand for checking that the set of permissions contains the [Send Messages in Threads] permission.
  ///
  ///[Send Messages in Threads]: Self::SEND_MESSAGES_IN_THREADS
  Future<bool> sendMessagesInThreads();

  ///Shorthand for checking that the set of permissions contains the [Send Polls] permission.
  ///
  ///[Send Polls]: Self::SEND_POLLS
  Future<bool> sendPolls();

  ///Shorthand for checking that the set of permissions contains the [Send TTS Messages] permission.
  ///
  ///[Send TTS Messages]: Self::SEND_TTS_MESSAGES
  Future<bool> sendTtsMessages();

  ///Shorthand for checking that the set of permissions contains the [Send Voice Messages] permission.
  ///
  ///[Send Voice Messages]: Self::SEND_VOICE_MESSAGES
  Future<bool> sendVoiceMessages();

  ///Shorthand for checking that the set of permissions contains the [Set Voice Channel status] permission.
  ///
  ///[Set Voice Channel status]: Self::SET_VOICE_CHANNEL_STATUS
  Future<bool> setVoiceChannelStatus();

  ///Shorthand for checking that the set of permissions contains the [Speak] permission.
  ///
  ///[Speak]: Self::SPEAK
  Future<bool> speak();

  ///Shorthand for checking that the set of permissions contains the [Stream] permission.
  ///
  ///[Stream]: Self::STREAM
  Future<bool> stream();

  ///Shorthand for checking that the set of permissions contains the [Use Application Commands] permission.
  ///
  ///[Use Application Commands]: Self::USE_APPLICATION_COMMANDS
  Future<bool> useApplicationCommands();

  ///Shorthand for checking that the set of permissions contains the [Use Embedded Activities] permission.
  ///
  ///[Use Embedded Activities]: Self::USE_EMBEDDED_ACTIVITIES
  Future<bool> useEmbeddedActivities();

  ///Shorthand for checking that the set of permissions contains the [Use External Apps] permission.
  ///
  ///[Use External Apps]: Self::USE_EXTERNAL_APPS
  Future<bool> useExternalApps();

  ///Shorthand for checking that the set of permissions contains the [Use External Emojis] permission.
  ///
  ///[Use External Emojis]: Self::USE_EXTERNAL_EMOJIS
  Future<bool> useExternalEmojis();

  ///Shorthand for checking that the set of permissions contains the [Use External Sounds] permission.
  ///
  ///[Use External Sounds]: Self::USE_EXTERNAL_SOUNDS
  Future<bool> useExternalSounds();

  ///Shorthand for checking that the set of permissions contains the [Use External Stickers] permission.
  ///
  ///[Use External Stickers]: Self::USE_EXTERNAL_STICKERS
  Future<bool> useExternalStickers();

  ///Shorthand for checking that the set of permissions contains the [Use Soundboard] permission.
  ///
  ///[Use Soundboard]: Self::USE_SOUNDBOARD
  Future<bool> useSoundboard();

  ///Shorthand for checking that the set of permissions contains the [Use Voice Activity] permission.
  ///
  ///[Use Voice Activity]: Self::USE_VAD
  Future<bool> useVad();

  ///Shorthand for checking that the set of permissions contains the [View Audit Log] permission.
  ///
  ///[View Audit Log]: Self::VIEW_AUDIT_LOG
  Future<bool> viewAuditLog();

  ///Shorthand for checking that the set of permissions contains the [View Channel] permission.
  ///
  ///[View Channel]: Self::VIEW_CHANNEL
  Future<bool> viewChannel();

  ///Shorthand for checking that the set of permissions contains the [View Creator Monetization Analytics] permission.
  ///
  ///[View Creator Monetization Analytics]: Self::VIEW_CREATOR_MONETIZATION_ANALYTICS
  Future<bool> viewCreatorMonetizationAnalytics();

  ///Shorthand for checking that the set of permissions contains the [View Guild Insights] permission.
  ///
  ///[View Guild Insights]: Self::VIEW_GUILD_INSIGHTS
  Future<bool> viewGuildInsights();
}
