// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.8.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import '../../lib.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These types are ignored because they are neither used by any `pub` functions nor (for structs and enums) marked `#[frb(unignore)]`: `GuildPagination`, `MessagePagination`, `UserPagination`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `as_ref`, `as_ref`, `assert_receiver_is_total_eq`, `clone`, `clone`, `eq`, `fmt`, `fmt`, `hash`
// These functions are ignored (category: IgnoreBecauseNotAllowedOwner): `cache`, `cache`, `cache`, `cache`, `cache`, `http`, `http`, `http`, `http`, `http`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Method>>
abstract class Method implements RustOpaqueInterface {}

abstract class CacheHttp {
  Future<ArcCache?> cache();

  Future<void> http();
}

/// An method used for ratelimiting special routes.
///
/// This is needed because [`reqwest`]'s [`Method`] enum does not derive Copy.
enum LightMethod {
  /// Indicates that a route is for the `DELETE` method only.
  delete,

  /// Indicates that a route is for the `GET` method only.
  get_,

  /// Indicates that a route is for the `PATCH` method only.
  patch,

  /// Indicates that a route is for the `POST` method only.
  post,

  /// Indicates that a route is for the `PUT` method only.
  put;

  Future<Method> reqwestMethod() =>
      RustLib.instance.api.serenityHttpLightMethodReqwestMethod(that: this);
}
