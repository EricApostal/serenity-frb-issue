// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.8.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import '../../lib.dart';
import 'model/id.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These functions are ignored because they have generic arguments: `execute`
// These types are ignored because they are neither used by any `pub` functions nor (for structs and enums) marked `#[frb(unignore)]`: `AutocompleteChoice`, `CreateButton`, `CreateChannel`, `CreateCommandOption`, `CreateCommand`, `CreateEmbedAuthor`, `CreateEmbedFooter`, `CreateForumPost`, `CreateForumTag`, `CreateInputText`, `CreateInteractionResponse`, `CreateInvite`, `CreateScheduledEvent`, `CreateSelectMenuKind`, `CreateSelectMenuOption`, `CreateSelectMenu`, `CreateStageInstance`, `CreateSticker`, `CreateThread`, `CreateWebhook`, `EditAutoModRule`, `EditChannel`, `EditGuildWelcomeScreen`, `EditGuildWidget`, `EditGuild`, `EditMember`, `EditRole`, `EditScheduledEvent`, `EditStageInstance`, `EditSticker`, `EditThread`, `EditWebhook`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AddMember>>
abstract class AddMember implements RustOpaqueInterface, Builder {
  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  /// Constructs a new builder with the given access token, leaving all other fields empty.
  static Future<AddMember> newInstance({required String accessToken}) => RustLib
      .instance
      .api
      .serenityBuilderAddMemberNew(accessToken: accessToken);
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CreateActionRow>>
abstract class CreateActionRow implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CreateAllowedMentions>>
abstract class CreateAllowedMentions implements RustOpaqueInterface {
  /// Toggles mentions for all roles. Overrides [`Self::roles`] if it was previously set.
  Future<CreateAllowedMentions> allRoles({required bool allow});

  /// Toggles mentions for all users. Overrides [`Self::users`] if it was previously set.
  Future<CreateAllowedMentions> allUsers({required bool allow});

  static Future<CreateAllowedMentions> default_() =>
      RustLib.instance.api.serenityBuilderCreateAllowedMentionsDefault();

  /// Toggles @everyone and @here mentions.
  Future<CreateAllowedMentions> everyone({required bool allow});

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  /// Equivalent to [`Self::default`].
  static Future<CreateAllowedMentions> newInstance() =>
      RustLib.instance.api.serenityBuilderCreateAllowedMentionsNew();
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CreateAttachment>>
abstract class CreateAttachment implements RustOpaqueInterface {
  Uint8List get data;

  String? get description;

  String get filename;

  set data(Uint8List data);

  set description(String? description);

  set filename(String filename);

  /// Converts the stored data to the base64 representation.
  ///
  /// This is used in the library internally because Discord expects image data as base64 in many
  /// places.
  Future<String> toBase64();
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CreateAutocompleteResponse>>
abstract class CreateAutocompleteResponse
    implements RustOpaqueInterface, Builder {
  static Future<CreateAutocompleteResponse> default_() =>
      RustLib.instance.api.serenityBuilderCreateAutocompleteResponseDefault();

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  /// Equivalent to [`Self::default`].
  static Future<CreateAutocompleteResponse> newInstance() =>
      RustLib.instance.api.serenityBuilderCreateAutocompleteResponseNew();
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CreateBotAuthParameters>>
abstract class CreateBotAuthParameters implements RustOpaqueInterface {
  /// Builds the url with the provided data.
  Future<String> build();

  static Future<CreateBotAuthParameters> default_() =>
      RustLib.instance.api.serenityBuilderCreateBotAuthParametersDefault();

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  /// Equivalent to [`Self::default`].
  static Future<CreateBotAuthParameters> newInstance() =>
      RustLib.instance.api.serenityBuilderCreateBotAuthParametersNew();
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CreateCommandPermission>>
abstract class CreateCommandPermission implements RustOpaqueInterface {
  /// Creates a permission overwrite for all channels in a guild
  static Future<CreateCommandPermission> allChannels({
    required GuildId guildId,
    required bool allow,
  }) => RustLib.instance.api.serenityBuilderCreateCommandPermissionAllChannels(
    guildId: guildId,
    allow: allow,
  );

  /// Creates a permission overwrite for a specific channel
  static Future<CreateCommandPermission> channel({
    required ChannelId id,
    required bool allow,
  }) => RustLib.instance.api.serenityBuilderCreateCommandPermissionChannel(
    id: id,
    allow: allow,
  );

  /// Creates a permission overwrite for a everyone in a guild
  static Future<CreateCommandPermission> everyone({
    required GuildId guildId,
    required bool allow,
  }) => RustLib.instance.api.serenityBuilderCreateCommandPermissionEveryone(
    guildId: guildId,
    allow: allow,
  );

  /// Creates a permission overwrite for a specific role
  static Future<CreateCommandPermission> role({
    required RoleId id,
    required bool allow,
  }) => RustLib.instance.api.serenityBuilderCreateCommandPermissionRole(
    id: id,
    allow: allow,
  );

  /// Creates a permission overwrite for a specific user
  static Future<CreateCommandPermission> user({
    required UserId id,
    required bool allow,
  }) => RustLib.instance.api.serenityBuilderCreateCommandPermissionUser(
    id: id,
    allow: allow,
  );
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CreateEmbed>>
abstract class CreateEmbed implements RustOpaqueInterface {
  /// Creates a builder with default values, setting the `type` to `rich`.
  static Future<CreateEmbed> default_() =>
      RustLib.instance.api.serenityBuilderCreateEmbedDefault();

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  /// Equivalent to [`Self::default`].
  static Future<CreateEmbed> newInstance() =>
      RustLib.instance.api.serenityBuilderCreateEmbedNew();
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CreateGuildWelcomeChannel>>
abstract class CreateGuildWelcomeChannel implements RustOpaqueInterface {
  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  static Future<CreateGuildWelcomeChannel> newInstance({
    required ChannelId channelId,
    required String description,
  }) => RustLib.instance.api.serenityBuilderCreateGuildWelcomeChannelNew(
    channelId: channelId,
    description: description,
  );
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CreateInteractionResponseFollowup>>
abstract class CreateInteractionResponseFollowup
    implements RustOpaqueInterface, Builder {
  static Future<CreateInteractionResponseFollowup> default_() =>
      RustLib.instance.api
          .serenityBuilderCreateInteractionResponseFollowupDefault();

  /// Sets a single embed to include in the message.
  ///
  /// Calling this will overwrite the embed list. To append embeds, call [`Self::add_embed`]
  /// instead.
  Future<CreateInteractionResponseFollowup> embed({required CreateEmbed embed});

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  /// Equivalent to [`Self::default`].
  static Future<CreateInteractionResponseFollowup> newInstance() =>
      RustLib.instance.api
          .serenityBuilderCreateInteractionResponseFollowupNew();
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CreateInteractionResponseMessage>>
abstract class CreateInteractionResponseMessage implements RustOpaqueInterface {
  static Future<CreateInteractionResponseMessage> default_() =>
      RustLib.instance.api
          .serenityBuilderCreateInteractionResponseMessageDefault();

  /// Sets a single embed to include in the message
  ///
  /// Calling this will overwrite the embed list. To append embeds, call [`Self::add_embed`]
  /// instead.
  Future<CreateInteractionResponseMessage> embed({required CreateEmbed embed});

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  /// Equivalent to [`Self::default`].
  static Future<CreateInteractionResponseMessage> newInstance() =>
      RustLib.instance.api.serenityBuilderCreateInteractionResponseMessageNew();
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CreateMessage>>
abstract class CreateMessage implements RustOpaqueInterface, Builder {
  static Future<CreateMessage> default_() =>
      RustLib.instance.api.serenityBuilderCreateMessageDefault();

  /// Set an embed for the message.
  ///
  /// **Note**: This will replace all existing embeds. Use [`Self::add_embed()`] to keep existing
  /// embeds.
  Future<CreateMessage> embed({required CreateEmbed embed});

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  static Future<CreateMessage> newInstance() =>
      RustLib.instance.api.serenityBuilderCreateMessageNew();
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CreateModal>>
abstract class CreateModal implements RustOpaqueInterface {
  static Future<CreateModal> default_() =>
      RustLib.instance.api.serenityBuilderCreateModalDefault();
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<EditAttachments>>
abstract class EditAttachments implements RustOpaqueInterface {
  static Future<EditAttachments> default_() =>
      RustLib.instance.api.serenityBuilderEditAttachmentsDefault();

  /// Creates a new attachments builder that keeps all existing attachments.
  ///
  /// Shorthand for [`Self::new()`] and calling [`Self::keep()`] for every [`AttachmentId`] in
  /// [`Message::attachments`].
  ///
  /// If you only want to keep a subset of attachments from the message, either implement this
  /// method manually, or use [`Self::remove()`].
  ///
  /// **Note: this EditAttachments must be run on the same message as is supplied here, or else
  /// Discord will throw an error!**
  static Future<EditAttachments> keepAll({required Message msg}) =>
      RustLib.instance.api.serenityBuilderEditAttachmentsKeepAll(msg: msg);

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  /// An empty attachments builder.
  ///
  /// Existing attachments are not kept by default, either. See [`Self::keep_all()`] or
  /// [`Self::keep()`].
  static Future<EditAttachments> newInstance() =>
      RustLib.instance.api.serenityBuilderEditAttachmentsNew();
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<EditCommandPermissions>>
abstract class EditCommandPermissions implements RustOpaqueInterface, Builder {
  static Future<EditCommandPermissions> default_() =>
      RustLib.instance.api.serenityBuilderEditCommandPermissionsDefault();

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  static Future<EditCommandPermissions> newInstance({
    required List<CreateCommandPermission> permissions,
  }) => RustLib.instance.api.serenityBuilderEditCommandPermissionsNew(
    permissions: permissions,
  );
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<EditInteractionResponse>>
abstract class EditInteractionResponse implements RustOpaqueInterface, Builder {
  /// Adds an embed for the message.
  ///
  /// Embeds from the original message are reset when adding new embeds and must be re-added.
  Future<EditInteractionResponse> addEmbed({required CreateEmbed embed});

  /// Adds multiple embeds to the message.
  ///
  /// Embeds from the original message are reset when adding new embeds and must be re-added.
  Future<EditInteractionResponse> addEmbeds({
    required List<CreateEmbed> embeds,
  });

  /// Set the allowed mentions for the message.
  Future<EditInteractionResponse> allowedMentions({
    required CreateAllowedMentions allowedMentions,
  });

  /// Sets attachments, see [`EditAttachments`] for more details.
  Future<EditInteractionResponse> attachments({
    required EditAttachments attachments,
  });

  /// Shorthand for calling [`Self::attachments`] with [`EditAttachments::new`].
  Future<EditInteractionResponse> clearAttachments();

  /// Sets the components of this message.
  Future<EditInteractionResponse> components({
    required List<CreateActionRow> components,
  });

  static Future<EditInteractionResponse> default_() =>
      RustLib.instance.api.serenityBuilderEditInteractionResponseDefault();

  /// Sets a single embed to include in the message
  ///
  /// Calling this will overwrite the embed list. To append embeds, call [`Self::add_embed`]
  /// instead.
  Future<EditInteractionResponse> embed({required CreateEmbed embed});

  /// Sets the embeds for the message.
  ///
  /// **Note**: You can only have up to 10 embeds per message.
  ///
  /// Calling this will overwrite the embed list. To append embeds, call [`Self::add_embeds`]
  /// instead.
  Future<EditInteractionResponse> embeds({required List<CreateEmbed> embeds});

  /// Shorthand for [`EditAttachments::keep`].
  Future<EditInteractionResponse> keepExistingAttachment({
    required AttachmentId id,
  });

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  /// Equivalent to [`Self::default`].
  static Future<EditInteractionResponse> newInstance() =>
      RustLib.instance.api.serenityBuilderEditInteractionResponseNew();

  /// Adds a new attachment to the message.
  ///
  /// Resets existing attachments. See the documentation for [`EditAttachments`] for details.
  Future<EditInteractionResponse> newAttachment({
    required CreateAttachment attachment,
  });
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<EditMessage>>
abstract class EditMessage implements RustOpaqueInterface, Builder {
  static Future<EditMessage> default_() =>
      RustLib.instance.api.serenityBuilderEditMessageDefault();

  /// Set an embed for the message.
  ///
  /// **Note**: This will replace all existing embeds. Use [`Self::add_embed()`] to keep existing
  /// embeds.
  Future<EditMessage> embed({required CreateEmbed embed});

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  /// Equivalent to [`Self::default`].
  static Future<EditMessage> newInstance() =>
      RustLib.instance.api.serenityBuilderEditMessageNew();
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<EditProfile>>
abstract class EditProfile implements RustOpaqueInterface, Builder {
  static Future<EditProfile> default_() =>
      RustLib.instance.api.serenityBuilderEditProfileDefault();

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  /// Equivalent to [`Self::default`].
  static Future<EditProfile> newInstance() =>
      RustLib.instance.api.serenityBuilderEditProfileNew();
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<EditVoiceState>>
abstract class EditVoiceState implements RustOpaqueInterface, Builder {
  static Future<EditVoiceState> default_() =>
      RustLib.instance.api.serenityBuilderEditVoiceStateDefault();

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  /// Equivalent to [`Self::default`].
  static Future<EditVoiceState> newInstance() =>
      RustLib.instance.api.serenityBuilderEditVoiceStateNew();
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<EditWebhookMessage>>
abstract class EditWebhookMessage implements RustOpaqueInterface, Builder {
  static Future<EditWebhookMessage> default_() =>
      RustLib.instance.api.serenityBuilderEditWebhookMessageDefault();

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  /// Equivalent to [`Self::default`].
  static Future<EditWebhookMessage> newInstance() =>
      RustLib.instance.api.serenityBuilderEditWebhookMessageNew();
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ExecuteWebhook>>
abstract class ExecuteWebhook implements RustOpaqueInterface, Builder {
  static Future<ExecuteWebhook> default_() =>
      RustLib.instance.api.serenityBuilderExecuteWebhookDefault();

  /// Set an embed for the message.
  ///
  /// Refer to the [struct-level documentation] for an example on how to use embeds.
  ///
  /// [struct-level documentation]: #examples
  Future<ExecuteWebhook> embed({required CreateEmbed embed});

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  /// Equivalent to [`Self::default`].
  static Future<ExecuteWebhook> newInstance() =>
      RustLib.instance.api.serenityBuilderExecuteWebhookNew();
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<GetEntitlements>>
abstract class GetEntitlements implements RustOpaqueInterface, Builder {
  static Future<GetEntitlements> default_() =>
      RustLib.instance.api.serenityBuilderGetEntitlementsDefault();
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<GetMessages>>
abstract class GetMessages implements RustOpaqueInterface, Builder {
  static Future<GetMessages> default_() =>
      RustLib.instance.api.serenityBuilderGetMessagesDefault();

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  /// Equivalent to [`Self::default`].
  static Future<GetMessages> newInstance() =>
      RustLib.instance.api.serenityBuilderGetMessagesNew();
}
